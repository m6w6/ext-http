// config.w32 for pecl/http
// $Id$

ARG_ENABLE("http", "whether to enable extended HTTP support", "no");

function check_for_main_ext(ext, header)
{
	if (!header) {
		header = "php_"+ ext +".h";
	}

	/* When in configure, we're always in the root of PHP source */
	var ext_path = "ext\\" + ext;
	
	STDOUT.Write("Checking for ext/"+ ext +" ...  ");

	if (FSO.FileExists(ext_path + "\\" + header)) {
		STDOUT.WriteLine(ext_path);
		return ext_path;
	}

	STDOUT.WriteLine("<not found>");
	return false;
}

function check_for_pecl_ext(ext, header)
{
	if (!header) {
		header = "php_"+ ext +".h";
	}
	
	var g;
	var s = ext +"\\"+ header;
	
	STDOUT.Write("Checking for pecl/"+ ext +" ...  ");
	if (	(g = glob(configure_module_dirname +"\\..\\"+ s)) ||
			(g = glob(configure_module_dirname +"\\..\\..\\..\\pecl\\"+ s))) {
		var f = g[0].substr(0, g[0].length - header.length - 1);
		STDOUT.WriteLine(f);
		return f;
	}
	STDOUT.WriteLine("<not found>");
	return false;
}

if (PHP_HTTP != "no") {

	EXTENSION("http",
		"php_http.c php_http_buffer.c php_http_client.c " +
		"php_http_client_request.c php_http_client_response.c " +
		"php_http_cookie.c php_http_curl.c php_http_client_curl.c " +
		"php_http_encoding.c php_http_env.c php_http_env_request.c " +
		"php_http_env_response.c php_http_etag.c php_http_exception.c php_http_filter.c php_http_header_parser.c " +
		"php_http_header.c php_http_info.c php_http_message.c php_http_message_body.c php_http_message_parser.c " +
		"php_http_misc.c php_http_negotiate.c php_http_object.c php_http_options.c php_http_params.c " +
		"php_http_querystring.c php_http_url.c php_http_version.c",
		null,
		null);
	AC_DEFINE("HAVE_HTTP", 1, "Have extended HTTP support");
	AC_DEFINE("HTTP_SHARED_DEPS", 1, "Depend on shared extensions");
	
	AC_DEFINE("HAVE_GETHOSTNAME", 1);
	
	if (PHP_DEBUG != "no") {
		ADD_FLAG("CFLAGS_HTTP", "/W3");
	}
	
	if (CHECK_HEADER_ADD_INCLUDE('zlib.h', 'CFLAGS_HTTP', '..\\zlib;' + php_usual_include_suspects)) {
		AC_DEFINE('HTTP_HAVE_ZLIB', 1, "Have zlib library");
		ADD_FLAG("LDFLAGS_HTTP", "/FORCE:MULTIPLE");
	} else {
		WARNING("zlib encoding functions not enabled; libraries and headers not found");
	}
	
	if (typeof(PHP_HASH) != "undefined" && PHP_HASH != "no") {
		var f;
		
		if ((f = check_for_pecl_ext("hash")) || (f = check_for_main_ext("hash"))) {
			ADD_FLAG("CFLAGS_HTTP", '/I "' + f + '" /DHTTP_HAVE_PHP_HASH_H=1');
			ADD_EXTENSION_DEP("http", "hash", true);
		}
	}
	
	if (PHP_SESSION != "no") {
		ADD_EXTENSION_DEP("http", "session", true);
	}
	
	if (PHP_ICONV != "no") {
		ADD_EXTENSION_DEP("http", "iconv", true);
	}
	
	if (PHP_CURL != "no") {
		ADD_EXTENSION_DEP("http", "curl", true);
	}

	
	CURL_LIB="libcurl_a.lib;libcurl.lib;" + (PHP_DEBUG != "no" ? "libcurld.lib":"libcurl.lib");
	if (CHECK_HEADER_ADD_INCLUDE("curl/curl.h", "CFLAGS_HTTP") &&
			CHECK_HEADER_ADD_INCLUDE("openssl/crypto.h", "CFLAGS_HTTP") &&
			CHECK_LIB(CURL_LIB, "http", PHP_HTTP) &&
			CHECK_LIB("ssleay32.lib", "http", PHP_HTTP) &&
			CHECK_LIB("libeay32.lib", "http", PHP_HTTP) &&
			CHECK_LIB("zlib.lib;zlib_a.lib", "http", PHP_HTTP) &&
			CHECK_LIB("libcurl_a.lib", "http", PHP_HTTP) &&
			ADD_EXTENSION_DEP("http", "propro", true) &&
			ADD_EXTENSION_DEP("http", "raphf", true) &&
			CHECK_LIB("winmm.lib", "http", PHP_HTTP)) {
		AC_DEFINE("PHP_HTTP_HAVE_CURL", 1, "Have CURL library");
		AC_DEFINE("PHP_HTTP_HAVE_SSL", 1, "Have SSL");
		AC_DEFINE("PHP_HAVE_CURL_MULTI_STRERROR", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_SHARE_STRERROR", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_EASY_STRERROR", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_EASY_RESET", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_GETFORMDATA", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_FORMGET", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_MULTI_SETOPT", 1, "");
		AC_DEFINE("PHP_HAVE_CURL_MULTI_TIMEOUT", 1, "");
		AC_DEFINE("PHP_HTTP_HAVE_CLIENT", 1, "Have HTTP client support");

		if (CHECK_HEADER_ADD_INCLUDE("event2/event.h", "CFLAGS_HTTP") &&
			CHECK_LIB("libevent.lib", "http", PHP_HTTP) &&
			CHECK_LIB("libevent_core.lib", "http", PHP_HTTP) &&
			CHECK_LIB("libevent_extras.lib", "http", PHP_HTTP)) {

			AC_DEFINE("PHP_HTTP_HAVE_EVENT", 1);
			AC_DEFINE("PHP_HTTP_HAVE_EVENT2", 1);
			AC_DEFINE("PHP_HTTP_EVENT_VERSION", "2.0.21 or greater");
		}
	} else {
		WARNING("curl convenience functions not enabled; libraries and headers not found");
	}
}
